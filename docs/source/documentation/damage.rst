======
Damage
======

The mapping from mitigation policy, :math:`X_t`, to damages over time, :math:`D_t`, goes via radiative forcing, which determines the excess energy created by GHGs in the atmosphere. The damage distribution associated with a given level of radiative forcing is interpolated, or extrapolated, relative to the radiative forcing of damage distributions estimated from three scenarios. The first is based on the IEA’s (2013) reference ‘New Policies Scenario’ and leads to eventual atmospheric CO levels of around 1000 ppm. The second assumes constant mitigation leading to eventual levels of 650 ppm, equivalent to reducing emissions by almost 60% relative to the 1000 ppm scenario. The third scenario assumes a constant mitigation of over 90%, leading to eventual :math:`CO_2 concentrations of 450 ppm.

For each of the three maximum GHG concentration levels, 450, 650, and 1000 ppm, the distribution of :math:`D_t` is calculated through Monte-Carlo simulations, using :mod:`ezclimate.damage_simulation`. The simulations are used to calculate damages in each period for any particular state of nature :math:`\theta_t` and any chosen time path for mitigation actions, :math:`X_t`. We do this by first calculating the radiative forcing associated with each simulation at the end of each period, and then interpolating the damage smoothly between the three different simulations with respect to their levels of radiative forcing. Functional forms for both GHG levels and climate forcing as a function of GHG emissions are fitted to the Representative Concentration Pathway (RCP) scenarios adopted by the IPCC for its fifth assessment report (IPCC_ 2013). In the IPCC report emissions, GHG concentrations, and radiative forcing are given for each of four RCP scenarios. The radiative forcing is assumed to be proportional to the integral over time of an excess GHG level raised to a power. The carbon absorption itself is similarly fit to the RCP scenarios, and is assumed to be proportional to the difference between the GHG level in the atmosphere and the cumulative carbon absorption up to that point in time, raised to a power.

Our task now is to calculate an interpolated damage function using our three simulations where we have damage coefficients (for a given state and period) to find a smooth function that gives damages for any particular level of radiative forcing up to each point in time. To do so, we assume a linear interpolation of damages between the 650 and 1000 ppm scenarios, and a quadratic interpolation between 450 and 650 ppm. In addition, we impose a smooth pasting condition at 650 ppm, having the level and derivative of the interpolation below 650 ppm match the level and slope of the line above.

Below 450 ppm, we assume damages exponentially decay toward zero. Mathematically, we let :math:`S = \frac{d \cdot p \cdot ln(0.5)}{l}`, where :math:`d` is the derivative of the quadratic interpolation function at 450 ppm, :math:`p=0.91667` is the average mitigation in the 450 ppm simulation, and :math:`l` is the level of damages. Radiative forcing at any point below 450 ppm then is :math:`x` percent below that of the 450 ppm simulation, with :math:`x = (R-r) / R`, where :math:`R` is the radiative forcing in the 450 ppm simulation and :math:`r` is the radiative forcing given the mitigation policy. Letting :math:`\sigma = 60`, the extension of the damage function for :math:`x > 0` is defined as :math:`Damage(x) = l \cdot 0.5^{S \cdot x} e^{-(x \cdot p)^2 / \sigma}`, which has the desired properties.

The climate sensitivity, summarized by state of nature :math:`\theta_t` is not known prior to the final period (:math:`T=t`). Rather, what the representative agent knows is the distribution of possible final states, :math:`\theta_T`. We specify that the damage in period :math:`t`, given average mitigation of :math:`X_t` up to time :math:`t`, is the probability weighted average of the interpolated damage function over all final states of nature reachable from that node. Specifically, the damage function at time :math:`t`, for the node indexed by :math:`\theta_t` is assumed to be:

.. math::

	D_t(X_t, \theta_t) = \sum_{\theta_T} Pr(\theta_T \vert \theta_t) \cdot D_t(X_t, \theta_T)

.. _IPCC: http://www.ipcc.ch/report/ar5/wg1/